import os
import re
from datetime import datetime, timedelta
from flask import Flask, request, jsonify
from openai import OpenAI
import requests
import dateparser
from apscheduler.schedulers.background import BackgroundScheduler

app = Flask(__name__)

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
ASSISTANT_ID = os.getenv("OPENAI_ASSISTANT_ID")

openai = OpenAI(api_key=OPENAI_API_KEY)
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}"

scheduler = BackgroundScheduler()
scheduler.start()

def send_telegram_message(chat_id: int, text: str):
    requests.post(f"{TELEGRAM_API_URL}/sendMessage", json={
        "chat_id": chat_id,
        "text": text
    })

def parse_reminder_time(reminder_time_str: str, run_time: datetime) -> datetime:
    """
    –ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–µ–≥–æ–¥–Ω—è –≤ 15:00', '–∑–∞–≤—Ç—Ä–∞ 10:30')
    –∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ ('10 –º–∏–Ω—É—Ç', '1 —á–∞—Å', '30 —Å–µ–∫—É–Ω–¥').
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç datetime –æ–±—ä–µ–∫—Ç–∞ UTC.
    """
    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ –≤—Ä–µ–º—è
    dt = dateparser.parse(reminder_time_str, settings={'RELATIVE_BASE': run_time, 'RETURN_AS_TIMEZONE_AWARE': False})
    if dt:
        return dt

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (—á–µ—Ä–µ–∑ regex)
    pattern = r"(\d+)\s*(—Å–µ–∫—É–Ω–¥|—Å–µ–∫|–º–∏–Ω—É—Ç|–º–∏–Ω|—á–∞—Å|—á–∞—Å–æ–≤|—á)"
    match = re.search(pattern, reminder_time_str.lower())
    if match:
        value, unit = match.groups()
        value = int(value)
        if unit.startswith("—Å–µ–∫"):
            delta = timedelta(seconds=value)
        elif unit.startswith("–º–∏–Ω"):
            delta = timedelta(minutes=value)
        elif unit.startswith("—á–∞—Å"):
            delta = timedelta(hours=value)
        else:
            delta = timedelta(minutes=10)  # –¥–µ—Ñ–æ–ª—Ç
        return run_time + delta

    # –ï—Å–ª–∏ –≤—Å—ë –ø–ª–æ—Ö–æ, —Å—Ç–∞–≤–∏–º –¥–µ—Ñ–æ–ª—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç
    return run_time + timedelta(minutes=10)


@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json
    message = data.get("message")
    if not message:
        return jsonify({"ok": True})

    chat_id = message["chat"]["id"]
    user_id = message["from"]["id"]
    user_message = message.get("text")

    if message.get("from", {}).get("is_bot"):
        return jsonify({"ok": True})

    if not user_message:
        return jsonify({"ok": True})

    thread_id = str(user_id)

    try:
        response = openai.responses.create(
            assistant=ASSISTANT_ID,
            thread=thread_id,
            messages=[{"role": "user", "content": user_message}],
            tools=["set_reminder"],  # –≤–∫–ª—é—á–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
        )

        # –ï—Å–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤—ã–∑–≤–∞–ª —Ñ—É–Ω–∫—Ü–∏—é set_reminder
        if "tool_calls" in response and response["tool_calls"]:
            for tool_call in response["tool_calls"]:
                if tool_call["tool"] == "set_reminder":
                    params = tool_call.get("parameters", {})
                    reminder_text = params.get("reminder_text")
                    reminder_time_str = params.get("reminder_time")

                    run_created_at = response.get("run", {}).get("created_at", None)
                    if run_created_at:
                        run_time = datetime.utcfromtimestamp(run_created_at)
                    else:
                        run_time = datetime.utcnow()

                    reminder_datetime = parse_reminder_time(reminder_time_str, run_time)

                    # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    scheduler.add_job(
                        send_telegram_message,
                        trigger="date",
                        run_date=reminder_datetime,
                        args=[chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder_text}"],
                    )

                    send_telegram_message(chat_id,
                        f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {reminder_datetime.strftime('%Y-%m-%d %H:%M:%S UTC')}")

        else:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
            parts = response["message"]["content"].get("parts")
            if parts and len(parts) > 0:
                assistant_reply = parts[0]
                send_telegram_message(chat_id, assistant_reply)
            else:
                send_telegram_message(chat_id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.")

    except Exception as e:
        print(f"OpenAI API error: {e}")
        send_telegram_message(chat_id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É.")

    return jsonify({"ok": True})


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000)
